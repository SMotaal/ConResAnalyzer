
%Function to generate optimum vector error filter
%  [F,OF] = runVecFiltOpt(FSIZE, DPI, DIST, T) generates the optimum
%  vector error filter F (may be applied in a linear RGB space)
%  and corresponding opponent error filter OF (may be applied in the linear opponent
%  color space induced by T). FSIZE denotes the size of the Gaussian
%  filters used in the Poirson and Wandell opponent representation. DPI denotes
% the display resolution in dots per inch. DIST is the distance of the observer from
% the monitor and T is the transformation from linear RGB into an opponent space.
%  The  order of filter coefficients returned in F and OF is [(0,1) (1,1) (1,0) (1,-1)]
%
% example: 
% [F,OF] = runVecFiltOpt; (runs the optimization with default values for an sRGB monitor, 
%                            FSIZE = 15, DPI = 72, DIST = 18)
% [F,OF] = runVecFiltOpt(7); (uses a shorter weighting filter. This is MUCH faster--
%                             recomended if you have a slow computer.)

% The diffusion with the optimum filter mut be applied on the gamma uncorrected image.
% The returned filter is guaranteed to be stable and has all positive coefficients.
% Note that [1] does not guarantee stable filters. 
% Enforcing that the filter have all positive coefficients in the framework of [1]
% yields stable filters. One can switch to such a filter in unstable regions. 
% Note that unlike the filters of Kolpatzik and Bouman our filter
% is matrix-valued in the opponent space. Although such filters are nearly scalar-valued
% in the RGB space they should be regarded as Vector error filters since they were designed
% by considering all planes jointly.
% This function requires the Matlab symbolic Math Toolbox.
%
% SEE ALSO VECDIFF, CRT_CHAR, RES_CORR, COLOR_MODEL


%Ref:  [1] N. Damera-Venkata and B. L. Evans, ``Design and Analysis of Vector Color 
%          Error Diffusion Halftoning  Systems,'' IEEE Transactions on Image Processing,
%          vol. 10, no. 10, pp. 1552--1565, October 2001.
%

% Author: Niranjan Damera-Venkata, Oct. 2000
% Modified July 2002, Vishal Monga


function [F,OF] = runVecFiltOpt(FSize,dpi,dist,T)

if nargin<1
   FSize=15;   end              
if nargin<2
   dpi=72; end
if nargin<3					
   dist = 18;
end
if nargin<4					
  T = [26.6353  60.3155  0.1098;-12.1955   5.5980  1.3265;-8.0305 -33.1450 44.9250];
end

sampPerDeg = round(dpi / ((180/pi)*atan(1/dist)));
FMid=(FSize+1)/2;
NC = (FMid-1)*FSize+FMid;

%from S-Cielab Matlab code
%T=cmatrix('xyz2opp')*cmatrix('srgb2xyz'); % srgb->opp

%Human visual filters for luminance and chrominance channels
lum_1 =  fspecial('gaussian',[FSize FSize],0.0283*sampPerDeg);
lum_2 =  fspecial('gaussian',[FSize FSize],0.133*sampPerDeg);
lum_3 =  fspecial('gaussian',[FSize FSize],4.336*sampPerDeg);

rg_1 =   fspecial('gaussian',[FSize FSize],0.0392*sampPerDeg);
rg_2 =   fspecial('gaussian',[FSize FSize],0.494*sampPerDeg);

by_1 =   fspecial('gaussian',[FSize FSize],0.0536*sampPerDeg);
by_2 =   fspecial('gaussian',[FSize FSize],0.386*sampPerDeg);


lum = 0.921*lum_1 + 0.105*lum_2 - 0.108*lum_3;
lum = lum./(sum(sum(lum)));

rg = 0.531*rg_1 + 0.330*rg_2;
rg = rg./(sum(sum(rg)));

by = 0.488*by_1 + 0.371*by_2;
by = by./(sum(sum(by)));   

%Assign values to cell array
V = cell([FSize FSize]);
for i=1:FSize
   for j=1:FSize
      V{i,j} = diag([lum(i,j) rg(i,j) by(i,j)])*T;
   end
end

%filter indices
HSize = (FSize-1)/2;
fi_x = [0 1 1 1]';
fi_y = [1 1 0 -1]';

R = cell([4 1]);
for i=1:4
   R{i}=zeros(3);
   for v_x = -HSize:HSize
      for v_y = -HSize:HSize
         vx_1ind = v_x+HSize+1;
         vy_1ind = v_y+HSize+1;
         vx_2ind = v_x+HSize+1+fi_x(i);
         vy_2ind = v_y+HSize+1+fi_y(i);
         if((vx_2ind <= FSize) & (vx_2ind >= 1) & (vy_2ind <= FSize) & (vy_2ind >= 1))
            R{i} = R{i} + V{vx_1ind,vy_1ind}'*V{vx_2ind,vy_2ind};
         end   
      end
   end  
end

H = cell([4 1]);
syms h1 h2 h3 h4 h5 h6 h7 h8 h9 real;
syms h10 h11 h12 h13 h14 h15 h16 h17 h18 real;
syms h19 h20 h21 h22 h23 h24 h25 h26 h27 real;
syms h28 h29 h30 h31 h32 h33 h34 h35 h36 real;

H{1} = [h1 h2 h3;h4 h5 h6;h7 h8 h9];
H{2} = [h10 h11 h12;h13 h14 h15;h16 h17 h18];
H{3} = [h10 h20 h21; h22 h23 h24; h25 h26 h27];
H{4} = [h28 h29 h30; h31 h32 h33; h34 h35 h36];

Ht1 = H{1}';
Ht2 = H{2}';
Ht3 = H{3}';
Ht4 = H{4}';

h = [Ht1(:);Ht2(:);Ht3(:);Ht4(:)];

L = cell([4 1]);

for i=1:4
   L{i}=zeros(3);
   for p = 1:4
      for sx = -HSize:HSize
         for sy = -HSize:HSize
            for qx = -HSize:HSize
               for qy = -HSize:HSize
                  
                  if(((fi_x(p)+qx-sx-fi_x(i))==0) & ((fi_y(p)+qy-sy-fi_y(i))==0) )
                   	 sx_ind = sx+HSize+1;
                      sy_ind = sy+HSize+1;
                      qx_ind = qx+HSize+1;
                      qy_ind = qy+HSize+1;
                      
                      L{i} = L{i} + V{sx_ind,sy_ind}'*V{qx_ind,qy_ind}*H{p};

                  end
               end
            end
         end
      end
   end
end

d=zeros(36,1);
ct = 0;
for i = 1:4
   for j = 1:3
      for k=1:3
         ct = ct + 1;
         d(ct) = R{i}(j,k);
         for t = 1:36
            C(ct,t) = double(diff(L{i}(j,k),h(t)));
         end
      end
   end
end


f1=[7 0 0 0 7 0 0 0 7]/16;
f2=[1 0 0 0 1 0 0 0 1]/16;
f3=[5 0 0 0 5 0 0 0 5]/16;
f4=[3 0 0 0 3 0 0 0 3]/16;
fin = [f1';f2';f3';f4'];

Aeq=[1 1 1 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0;...
   0 0 0 1 1 1 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 1 1 1 0 0 0;...
   0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 1 1 1];
beq = [1 1 1]';
lb = zeros(36,1);
ub = ones(36,1);
options=optimset('lsqlin');
options = optimset(options,'Display','iter','Diagnostics','on','LargeScale','off');
sol = lsqlin(C,d,[],[],Aeq,beq,lb,ub,fin,options);

F1 = reshape(sol(1:9),[3 3])';
F2 = reshape(sol(10:18),[3 3])';
F3 = reshape(sol(19:27),[3 3])';
F4 = reshape(sol(28:36),[3 3])';

F =[F1 F2 F3 F4]; %The Error Filter in RGB

OF=[T*F1*inv(T) T*F2*inv(T) T*F3*inv(T) T*F4*inv(T)]; %Error filter in Opponent Color Space


